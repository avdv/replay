load(
    "@bazel_gazelle//:def.bzl",
    "DEFAULT_LANGUAGES",
    "gazelle",
    "gazelle_binary",
)
load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
    "haskell_toolchain_library",
)
load("@rules_haskell//haskell/experimental:defs.bzl", "haskell_module")

config_setting(
    name = "optimize_build",
    values = {
        "compilation_mode": "opt",
    },
)

haskell_library(
    name = "lib",
    ghcopts = [
        "-Wall",
    ] + select(
        {
            ":optimize_build": ["-O2"],
            "//conditions:default": [],
        },
    ),
    modules = [
        ":lib.Lib",
        ":lib.UI",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":auto-update_pkg",
        ":base_pkg",
        ":brick_pkg",
        ":bytestring_pkg",
        ":filepath_pkg",
        ":fsnotify_pkg",
        ":microlens-th_pkg",
        ":microlens_pkg",
        ":mtl_pkg",
        ":optparse-applicative_pkg",
        ":process_pkg",
        ":text_pkg",
        ":unix_pkg",
        ":vty-unix_pkg",
        ":vty_pkg",
    ],
)

[
    haskell_toolchain_library(
        name = "{}_pkg".format(pkg),
        package = pkg,
    )
    for pkg in [
        "attoparsec",
        "auto-update",
        "base",
        "brick",
        "bytestring",
        "directory",
        "filepath",
        "fsnotify",
        "ini",
        "microlens",
        "microlens-th",
        "mtl",
        "optparse-applicative",
        "process",
        "template-haskell",
        "text",
        "unix",
        "vty",
        "vty-unix",
    ]
]

haskell_binary(
    name = "replay",
    ghcopts =
        [
            "-Wall",
            "-threaded",  # Use multicore runtime
            "-rtsopts",  # Enable specifying runtime options on command line
        ] + select({
            ":optimize_build": ["-O2"],
            "//conditions:default": [],
        }),
    modules = [
        ":replay.Main",
        ":replay.Version",
    ],
    narrowed_deps = [":lib"],
    deps = [
        ":attoparsec_pkg",
        ":base_pkg",
        ":directory_pkg",
        ":filepath_pkg",
        ":ini_pkg",
        ":optparse-applicative_pkg",
        ":template-haskell_pkg",
        ":text_pkg",
    ],
)

#haskell_test(
#    name = "unit",
#    srcs = glob(["test/**/*.hs"]),
#    deps = [
#        ":args",
#        "@stackage//:base",
#        "@stackage//:hspec",
#        "@stackage//:optparse-applicative",
#    ],
#)

gazelle(
    name = "gazelle",
    gazelle = ":gazelle_binary",
)

gazelle_binary(
    name = "gazelle_binary",
    languages = DEFAULT_LANGUAGES + ["@io_tweag_gazelle_haskell_modules//gazelle_haskell_modules"],
)

# rule generated by gazelle_haskell_modules
haskell_module(
    name = "lib.Lib",
    src = "src/Lib.hs",
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
)

# rule generated by gazelle_haskell_modules
haskell_module(
    name = "replay.Main",
    src = "app/Main.hs",
    cross_library_deps = [
        ":lib.Lib",
        ":lib.UI",
    ],
    src_strip_prefix = "app",
    visibility = ["//visibility:public"],
    deps = [":replay.Version"],
)

# rule generated by gazelle_haskell_modules
haskell_module(
    name = "lib.UI",
    src = "src/UI.hs",
    enable_th = True,
    src_strip_prefix = "src",
    visibility = ["//visibility:public"],
    deps = [":lib.Lib"],
)

# rule generated by gazelle_haskell_modules
haskell_module(
    name = "replay.Version",
    src = "app/Version.hs",
    enable_th = True,
    extra_srcs = ["VERSION"],
    src_strip_prefix = "app",
    visibility = ["//visibility:public"],
)
