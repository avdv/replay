load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
)

config_setting(
    name = "optimize_build",
    values = {
        "compilation_mode": "opt",
    },
)

haskell_library(
    name = "lib",
    srcs = glob(["src/**/*.hs"]),
    compiler_flags = [
        "-Wall",
    ] + select(
        {
            ":optimize_build": ["-O2"],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = [
        "@stackage//:base",
        "@stackage//:brick",
        "@stackage//:bytestring",
        "@stackage//:hinotify",
        "@stackage//:microlens",
        "@stackage//:microlens-th",
        "@stackage//:mtl",
        "@stackage//:optparse-applicative",
        "@stackage//:process",
        "@stackage//:text",
        "@stackage//:unix",
        "@stackage//:vty",
    ],
)

haskell_binary(
    name = "replay",
    srcs = glob(["app/**/*.hs"]),
    compiler_flags =
        [
            "-Wall",
            "-threaded",  # Use multicore runtime
            "-rtsopts",  # Enable specifying runtime options on command line
        ] + select({
            ":optimize_build": ["-O2"],
            "//conditions:default": [],
        }),
    deps = [
        "//:lib",
        "@stackage//:base",
        "@stackage//:optparse-applicative",
        "@stackage//:text",
    ],
)

#haskell_test(
#    name = "unit",
#    srcs = glob(["test/**/*.hs"]),
#    deps = [
#        ":args",
#        "@stackage//:base",
#        "@stackage//:hspec",
#        "@stackage//:optparse-applicative",
#    ],
#)
