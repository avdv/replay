load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_binary",
    "haskell_library",
    "haskell_toolchain_library",
)
load("@bazel_gazelle//:def.bzl", "gazelle")

config_setting(
    name = "optimize_build",
    values = {
        "compilation_mode": "opt",
    },
)

haskell_library(
    name = "lib",
    srcs = glob(["src/**/*.hs"]),
    compiler_flags = [
        "-Wall",
    ] + select(
        {
            ":optimize_build": ["-O2"],
            "//conditions:default": [],
        },
    ),
    visibility = ["//visibility:public"],
    deps = [
        "{}_pkg".format(pkg)
        for pkg in "base brick bytestring hinotify microlens microlens-th mtl optparse-applicative process text unix vty".split(" ")
    ],
)

haskell_toolchain_library(
    name = "base_pkg",
    package = "base",
)

haskell_toolchain_library(
    name = "optparse-applicative_pkg",
    package = "optparse-applicative",
)

haskell_toolchain_library(
    name = "text_pkg",
    package = "text",
)

haskell_toolchain_library(
    name = "brick_pkg",
    package = "brick",
)

haskell_toolchain_library(
    name = "bytestring_pkg",
    package = "bytestring",
)

haskell_toolchain_library(
    name = "process_pkg",
    package = "process",
)

haskell_toolchain_library(
    name = "vty_pkg",
    package = "vty",
)

haskell_toolchain_library(
    name = "microlens_pkg",
    package = "microlens",
)

haskell_toolchain_library(
    name = "microlens-th_pkg",
    package = "microlens-th",
)

haskell_toolchain_library(
    name = "mtl_pkg",
    package = "mtl",
)

haskell_toolchain_library(
    name = "unix_pkg",
    package = "unix",
)

haskell_toolchain_library(
    name = "hinotify_pkg",
    package = "hinotify",
)

haskell_binary(
    name = "replay",
    srcs = glob(["app/**/*.hs"]),
    compiler_flags =
        [
            "-Wall",
            "-threaded",  # Use multicore runtime
            "-rtsopts",  # Enable specifying runtime options on command line
        ] + select({
            ":optimize_build": ["-O2"],
            "//conditions:default": [],
        }),
    deps = [
        "base_pkg",
        "optparse-applicative_pkg",
        "text_pkg",
        "//:lib",
    ],
)

#haskell_test(
#    name = "unit",
#    srcs = glob(["test/**/*.hs"]),
#    deps = [
#        ":args",
#        "@stackage//:base",
#        "@stackage//:hspec",
#        "@stackage//:optparse-applicative",
#    ],
#)

gazelle(name = "gazelle")
