module(
    name = "replay",
    version = "0.2",
)

bazel_dep(name = "rules_nixpkgs_core", version = "0.13.0")
bazel_dep(
    name = "rules_haskell_nix",
    version = "0.19",
)
bazel_dep(
    name = "rules_haskell",
    version = "1.0",
)
bazel_dep(
    name = "rules_nixpkgs_cc",
    version = "0.13.0",
)
bazel_dep(
    name = "rules_nixpkgs_python",
    version = "0.13.0",
)
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "protobuf", version = "32.0")
bazel_dep(name = "rules_proto", version = "7.1.0")  #, repo_name = "com_google_protobuf")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_sh", version = "0.5.0")
bazel_dep(name = "rules_python", version = "1.6.0")
bazel_dep(name = "rules_cc", version = "0.2.4")
bazel_dep(name = "rules_nixpkgs_go", version = "0.13.0")
bazel_dep(name = "rules_go", version = "0.55.1", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.45.0", repo_name = "bazel_gazelle")

GHC_OPTS = [
    "-Wall",
    "-Wcompat",
    "-Widentities",
    "-Wincomplete-record-updates",
    "-Wincomplete-uni-patterns",
    "-Wpartial-fields",
    "-Wredundant-constraints",
    "-Werror",
    "-XNamedFieldPuns",
    "-XOverloadedRecordDot",
    "-XOverloadedStrings",
]

GHC_VERSION = "9.4.8"

nix_repo = use_extension("@rules_nixpkgs_core//extensions:repository.bzl", "nix_repo")
nix_repo.file(
    name = "nixpkgs",
    file = "//:nixpkgs.nix",
    file_deps = [
        "//:flake.lock",
    ],
)
use_repo(nix_repo, "nixpkgs")

nix_haskell_toolchains = use_extension(
    "@rules_haskell_nix//extensions:nix_haskell_toolchains.bzl",
    "nix_haskell_toolchains",
)
nix_haskell_toolchains.new(
    attribute_path = "",
    ghcopts = GHC_OPTS,
    nix_file = "//nix:ghc.nix",
    nix_file_deps = [
        "//:nixpkgs.nix",
        "//:flake.lock",
    ],
    nixopts = [
        "--argstr",
        "ghcVersion",
        GHC_VERSION,
    ],
    repository = "@nixpkgs",
    version = GHC_VERSION,
)

sh_configure = use_extension("@rules_sh//bzlmod:extensions.bzl", "sh_configure")
use_repo(sh_configure, "local_posix_config")

init = use_extension(":repos.bzl", "init")
init.nix_toolchains(repository = "@nixpkgs")
init.ghc_in_nix(
    ghc_opts = GHC_OPTS,
    version = GHC_VERSION,
)
use_repo(
    init,
    "go_sdk",
    "go_sdk_helpers",
    "go_sdk_toolchains",
    "io_tweag_gazelle_haskell_modules",
    "nixpkgs_cc",
    "nixpkgs_cc_info",
    "nixpkgs_cc_toolchains",
    "nixpkgs_python_toolchain",
    "rules_haskell_nix_ghc_in_nix_toolchain",
    "rules_haskell_python_local",
)

register_toolchains("@nixpkgs_cc_toolchains//:all")

register_toolchains("@go_sdk_toolchains//:all")

register_toolchains("@nixpkgs_python_toolchain//:toolchain")

register_toolchains("@rules_haskell_python_local//:toolchain")

go_sdk = use_extension("//go:extensions.bzl", "go_sdk")

gazelle_haskell = use_extension(":init_gazelle_haskell.bzl", "gazelle_haskell")
gazelle_haskell.init(json = "//:json_pkg")
use_repo(gazelle_haskell, "io_tweag_gazelle_haskell_modules_deps")

go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "@io_bazel_rules_go//:go.mod")
use_repo(
    go_deps,
    "com_github_bazelbuild_buildtools",
    "com_github_gogo_protobuf",
    "com_github_golang_mock",
    "com_github_golang_protobuf",
    "com_github_pmezard_go_difflib",
    "org_golang_google_genproto",
    "org_golang_google_grpc",
    "org_golang_google_grpc_cmd_protoc_gen_go_grpc",
    "org_golang_google_protobuf",
    "org_golang_x_net",
    "org_golang_x_tools",
)
