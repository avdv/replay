module(
    name = "replay",
    version = "0.2",
)

bazel_dep(name = "rules_nixpkgs_core", version = "0.12.0")
bazel_dep(
    name = "rules_haskell_nix",
    version = "0.19",
)
bazel_dep(
    name = "rules_haskell",
    version = "1.0",
)
bazel_dep(
    name = "rules_nixpkgs_cc",
    version = "0.11.1",
)
bazel_dep(
    name = "rules_nixpkgs_python",
    version = "0.11.1",
)
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "protobuf", version = "29.0")
bazel_dep(name = "rules_proto", version = "7.0.2")  #, repo_name = "com_google_protobuf")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_sh", version = "0.4.0")
bazel_dep(name = "rules_python", version = "0.40.0")
bazel_dep(name = "rules_cc", version = "0.1.0")
bazel_dep(name = "rules_nixpkgs_go", version = "0.11.1")

GHC_OPTS = [
    "-Wall",
    "-Wcompat",
    "-Widentities",
    "-Wincomplete-record-updates",
    "-Wincomplete-uni-patterns",
    "-Wpartial-fields",
    "-Wredundant-constraints",
    "-Werror",
    "-XNamedFieldPuns",
    "-XOverloadedRecordDot",
    "-XOverloadedStrings",
]

GHC_VERSION = "9.4.8"

nix_repo = use_extension("@rules_nixpkgs_core//extensions:repository.bzl", "nix_repo")
nix_repo.file(
    name = "nixpkgs",
    file = "//:nixpkgs.nix",
    file_deps = [
    "//:flake.lock",
    ]
)
use_repo(nix_repo, "nixpkgs")

nix_haskell_toolchains = use_extension(
    "@rules_haskell_nix//extensions:nix_haskell_toolchains.bzl",
    "nix_haskell_toolchains",
)
nix_haskell_toolchains.new(
    attribute_path = "",
    ghcopts = GHC_OPTS,
    nix_file = "//nix:ghc.nix",
    nix_file_deps = [
        "//:nixpkgs.nix",
        "//:flake.lock",
    ],
    nixopts = [
        "--argstr",
        "ghcVersion",
        GHC_VERSION,
    ],
    repository = "@nixpkgs",
    version = GHC_VERSION,
)

sh_configure = use_extension("@rules_sh//bzlmod:extensions.bzl", "sh_configure")

use_repo(sh_configure, "local_posix_config")

stack = use_extension("@rules_haskell//extensions:stack_snapshot.bzl", "stack_snapshot")

stack.snapshot(name = "lts-18.28")

stack.package(name = "json")

use_repo(stack, "stackage")
